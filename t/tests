#!/usr/bin/env bait
#

NL=$'\n'
export TASKIT_LINE_PREFIX=$RANDOM$RANDOM
taskit() {
    command taskit "$@" | grep -v "$TASKIT_LINE_PREFIX"
    return $PIPESTATUS
}

Case "An empty Taskfile" {
    assert taskit -f <(echo)
}

Case "A Taskfile returning non-zero when sourced by taskit fails" {
    local output rc
    output=$(
        taskit -f <(cat <<'EOF'
            echo hello
            Task::a-task () { echo world; }
            return 123
EOF
        ) a-task
    ) || rc=$?
    assert [[ $output = hello && $rc = 123 ]]
}

Case "Sources 'Taskfile' in the current directory if one is not specified explicitly" {
    local d output
    d=$(mktemp -d tmp.XXXXXXXXXXX) || return $?
    output=$(
        cd "$d" &&
        echo "Task::a-task () { echo hello; }" > Taskfile &&
        taskit a-task
    )
    rm -rf "$d"
    assert [[ $output = hello ]]
}

Case "A simple task that succeeds" {
    local output
    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                echo "Hello Taskit!"
            }
EOF
        ) a-task
    )
    assert [[ $output = "Hello Taskit!" ]]
}

Case "A simple task that fails" {
    local rc
    taskit -f <(echo 'Task::a-task () { return 123; }') a-task || rc=$?
    assert [[ $rc = 123 ]]
}

Case "A task can also be refered to by its function name" {
    local output
    output=$(
        taskit -f <(echo 'Task::a-task () { echo hello; }') Task::a-task
    )
    assert [[ $output = "hello" ]]
}

Case "Runs the 'default' task if one is defined and no tasks are specified to run" {
     output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () { echo hello; }
            Task::default () { echo the default; }
EOF
        )
     )
     assert [[ $output = "the default" ]]
}

Case "Sourcing task functions defined in other files works" {
    local d output
    d=$(mktemp -d tmp.XXXXXXXXXXX) || return $?
    output=$(
        cd "$d" &&
        echo 'Task::in-file-a () { echo $BASH_SOURCE; }' > ./a &&
        echo 'Task::in-file-b () { echo $BASH_SOURCE; }; source ./c' > ./b &&
        echo 'Task::in-file-c () { echo $BASH_SOURCE; }' > ./c &&
        echo '
          source ./a
          Task::a-task () { echo ${TASKS[*]}; }
          source ./b
          Task::another-task () { :; }
        ' > ./Taskfile &&
        taskit a-task
    )
    rm -rf "$d"
    assert grep "Task::in-file-a Task::a-task Task::in-file-b Task::in-file-c Task::another-task" <<<"$output"
}

Case "taskit -t shows all tasks with @desc and exits 0; not running any tasks" {
    local output
    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @desc "This is a task"
                echo "It does something"
            }
            Task::internal () { echo a helper task; }
            Task::another-task () {
                : @desc "Another task"
            }
EOF
        ) -t a-task
    )
    assert {
        [[ $? = 0 && $output = "Available tasks:

  a-task          -    This is a task
  another-task    -    Another task"  ]]
    }
}


Case "taskit -h <task> shows the task's help doc" {
    local d output
    d=$(mktemp -d tmp.XXXXXXXXXXX) || return $?
    output=$(
        cd "$d" && cat > Taskfile <<'EOF'
            # Consecutive comments above the task definition will be used as task description.

            # This is an example task.
            # It is used as a test.
            Task::a-task () {
                : @desc "This task does something."
                : @param optional "this parameter is optional"
                : @param optional_with_default=123 "this optional parameter has a default."
                : @param required! "This parameter is required"
                : @param slurpy% "this parameter collects all unknown named arguments"
            }
EOF
        taskit -h a-task
    )
    rm -rf "$d"
    assert {
        [[ $output = "TASK
        a-task -- This task does something.

DESCRIPTION
        This is an example task.
        It is used as a test.

PARAMETERS
        optional                     This parameter is optional.
        optional_with_default=123    This optional parameter has a default.
        required!                    This parameter is required.
        slurpy%                      This parameter collects all unknown named arguments." ]]
    }
}


Case "A task with optional and required parameters" {
    local tasks='
        Task::seq () {
            : @param start=1
            : @param end!
            : @param step

            local i
            for (( i=$_start; i<=$_end; i+=${_step:-1} )); do
                echo $i
            done
        }
    '
    local output rc

    output=$(taskit -f <(echo "$tasks") seq 2>&1); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Required parameter not set for Task::seq: end" <<<"$output"

    output=$(taskit -f <(echo "$tasks") seq begin=1 end=10 2>&1); output=$(echo $output)
    assert grep "Unknown arguments for Task::seq: begin=1" <<<"$output"

    output=$(taskit -f <(echo "$tasks") seq = end=10 start 2>&1); output=$(echo $output)
    assert grep "Missing parameter name for Task::seq: =" <<<"$output"
    assert grep "Task function not found: Task::start" <<<"$output"

    output=$(taskit -f <(echo "$tasks") seq end=10); output=$(echo $output)
    assert [[ $output = "1 2 3 4 5 6 7 8 9 10" ]]

    output=$(taskit -f <(echo "$tasks") seq start=5 end=10); output=$(echo $output)
    assert [[ $output = "5 6 7 8 9 10" ]]

    output=$(taskit -f <(echo "$tasks") seq step=2 end=10); output=$(echo $output)
    assert [[ $output = "1 3 5 7 9" ]]

    output=$(taskit -f <(echo "$tasks") seq step=2 end=5 seq start=6 end=8); output=$(echo $output)
    assert [[ $output = "1 3 5 6 7 8" ]]
}

Case "A task with a slurpy parameter" {
    local output
    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param threshold=5
                : @param rest%

                local k
                for k in "${!_rest[@]}"; do
                    if [[ ${_rest[$k]} -ge $_threshold ]]; then
                        echo $k
                    fi
                done | sort
            }
EOF
        ) a-task a=1 b=2 c=3 d=4 e=5 threshold=3
    )
    output=$(echo $output)
    assert [[ $output = "c d e" ]]
}

Case "Tasks with incorrect parameter specifications" {
    local output rc
    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Invalid parameter specification for Task::a-task: " <<<"$output"

    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param "bad name"
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Invalid parameter specification for Task::a-task: bad name" <<<"$output"

    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param 123
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Invalid parameter specification for Task::a-task: 123" <<<"$output"

    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param name
                : @param name
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Duplicate parameter name in Task::a-task: name" <<<"$output"


    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param name
                : @param name=abc
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Duplicate parameter name in Task::a-task: name" <<<"$output"

    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param name!
                : @param name
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Duplicate parameter name in Task::a-task: name" <<<"$output"


    output=$(
        taskit -f <(cat <<'EOF'
            Task::a-task () {
                : @param all%
                : @param rest%
            }
EOF
        ) 2>&1
    ); rc=$?
    assert [[ $rc -ne 0 ]] && grep "Multiple '%' parameters is not allowed!" <<<"$output"
}

Case "A task run without arguments will only be run once" {
    local output
    output=$(taskit -f <(echo '
        Task::a-task () {
            : @param arg=123
            echo hello
        }'
      ) a-task a-task
    )
    assert [[ $output = hello ]]
}

Case "A task run with arguments will always run" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @param name=someone
                echo hello $_name
            }'
        ) a-task a-task a-task name=taskit a-task
    )
    assert [[ $output = "hello someone${NL}hello taskit" ]]
}

Case "A task with dependencies and dependencies have arguments" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @param arg1=aaa
                : @needs task1 arg1=abc arg2=123 task2
                : @needs task3 task6 a=1 b=2 arg1=gg
                echo $FUNCNAME $_arg1
            }
            Task::task1 () {
                : @param arg1
                : @param arg2
                : @needs task4 arg1=kkk
                : @needs task5
                echo $FUNCNAME $_arg1 $_arg2
            }
            Task::task2 () {
                : @needs task7 arg1=777
                echo $FUNCNAME
            }
            Task::task3 () { echo $FUNCNAME; }
            Task::task4 () {
                : @param arg1
                echo $FUNCNAME $_arg1
            }
            Task::task5 () { echo $FUNCNAME; }
            Task::task6 () {
                : @param arg1
                : @param rest%
                : @needs task3
                echo $FUNCNAME $_arg1
                local k
                for k in "${!_rest[@]}"; do
                    echo $k = ${_rest[$k]}
                done | sort
            }
            Task::task7 () {
                : @param arg1
                echo $FUNCNAME $_arg1
            }

            '
        ) a-task a-task arg1=xyz
    )
    assert {
        [[ $output = "\
Task::task4 kkk
Task::task5
Task::task1 abc 123
Task::task7 777
Task::task2
Task::task3
Task::task6 gg
a = 1
b = 2
Task::a-task aaa
Task::task4 kkk
Task::task1 abc 123
Task::task6 gg
a = 1
b = 2
Task::a-task xyz" \
        ]]
    }
}

Case "A task cannot have missing dependency" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @needs whatever
                echo $FUNCNAME
            }'
        ) a-task 2>&1
    )
    assert grep "Task function not found: Task::whatever" <<<"$output"
}

Case "A Task cannot have circular dependency" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @needs a-task
            }
            Task::task-x () {
                : @needs task-y
                : @needs task-z
            }
            Task::task-y () {
                : @needs task-w
                : @needs task-z
            }
            Task::task-z () {
                : @needs task-w
            }
            Task::task-w () {
                : @needs task-x
            }
            '
        ) 2>&1
    )
    assert [[ $(grep "Circular task dependency" <<<"$output" | wc -l) = 14 ]]
}

Case "A task's dependency cannot omit its required argument" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @needs another-task
                echo $FUNCNAME
            }
            Task::another-task () {
                : @param arg!
                echo another task
            }'
        ) a-task 2>&1
    )
    assert grep "Required parameter not set for Task::another-task: arg" <<<"$output"
}

Case "A failed task shows its stack trace" {
    local output
    output=$(
        taskit -f <(echo '
            set -e
            Task::a-task () {
                : @needs another-task arg=123
                echo $FUNCNAME
            }
            Task::another-task () {  # line 7
                : @param arg!
                echo another task
                (( 1 > 2 ))
                echo not reaching here
            }'
        ) a-task 2>&1
    )
    assert egrep "File /dev/fd/[0-9]+, line 7, in Task::another-task \(\)" <<<"$output"
}

Case "Exact stack trace without set -e" {
    local output
    output=$(
        taskit -f <(echo '
            Task::a-task () {
                : @needs another-task arg=123
                echo $FUNCNAME
            }
            Task::another-task () {
                : @param arg!
                echo another task
                (( 1 > 2 )) || taskit_die  # line 9
                echo not reaching here
            }'
        ) a-task 2>&1
    )
    assert egrep "Return status: 1" <<<"$output"
    assert egrep "File /dev/fd/[0-9]+, line 9, in Task::another-task \(\)" <<<"$output"
}

Case "Task exclude should work" {
    local output
    output=$(
        taskit -x 'a* yet-*' -f <(echo '
            Task::a-task () { echo aaa; }
            Task::another-task () { echo another; }
            Task::yet-another-task () { echo yyyy; }
            Task::b-task () {
                : @needs a-task another-task
                echo bbb
            }
            Task::c-task () {
                : @needs b-task yet-another-task
                echo ccc
            }'
        ) c-task
    )
    assert [[ $output = "bbb${NL}ccc" ]]
}
